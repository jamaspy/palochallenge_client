{"version":3,"sources":["components/Form.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["Form","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","input","event","setState","defineProperty","target","value","state","firstname","lastname","bind","assertThisInitialized","addNewName","inherits","createClass","key","_this2","axios","post","then","response","console","log","concat","catch","error","react_default","a","createElement","Fragment","Grid","container","spacing","alignItems","justify","direction","style","color","TextField","label","defaultValue","onChange","marginTop","Button","variant","onClick","Component","Result","isLoading","names","fetch","json","data","fetchNames","_this$state","message","map","name","id","asciify","binarify","countZeros","width","display","border","borderRadius","textAlign","margin","padding","React","App","className","backgroundImage","height","components_Form","components_Result","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.64b5c5e3.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios'\n\nexport class Form extends Component {\n    constructor(){\n        super()\n        this.state = {\n            firstname:\"\",\n            lastname: \"\",\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.addNewName = this.addNewName.bind(this)\n    }\n    \n    handleChange = input => event => {\n        this.setState({\n            [input]: event.target.value\n        });\n    }\n\n    addNewName() {\n        axios.post( 'https://paloitchallenge.herokuapp.com/people.json',  {firstname: this.state.firstname, lastname: this.state.lastname} )\n        .then(response => {\n            console.log(`This is the response ${response}`)\n            this.setState({\n                firstname: \"\",\n                lastname: \"\"\n            })\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n\n\n    render() {\n        return (\n        \n            <React.Fragment>\n                \n                <Grid\n                container\n                spacing={0}\n                alignItems=\"center\"\n                justify=\"center\">\n                <Grid \n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\">\n                    <h1 style={{color: \"white\"}}>Enter Your First & Last Name Below To Get Some Nerdy Facts Back</h1>\n                </Grid>\n                <TextField\n                        label=\"First Name\"\n                        defaultValue={this.state.firstname}\n                        onChange={this.handleChange('firstname')}                      \n                />\n                \n                <TextField\n                        label=\"Last Name\"\n                        color=\"secondary\"\n                        defaultValue={this.state.lastname}\n                        onChange={this.handleChange('lastname')}\n                />\n                </Grid>\n                <Grid\n                container\n                spacing={0}\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{marginTop: 30}}\n                >\n                <Button \n                variant=\"contained\" \n                color=\"secondary\" \n                onClick={this.addNewName}>Add New Name</Button>\n                </Grid>\n                \n            </React.Fragment>\n            \n        )\n    }\n}\n\nexport default Form\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nclass Result extends React.Component {\n  state = {\n    isLoading: true,\n    names: [],\n    error: null\n  }\n\n  fetchNames() {\n    // Fetch Data from Heroku\n    fetch(`https://paloitchallenge.herokuapp.com/people.json`)\n      // API response and receive data in JSON format\n      .then(response => response.json())\n      // Update the users state\n      .then(data =>\n        this.setState({\n          names: data,\n          isLoading: false,\n        })\n      )\n      // Catch any errors\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  componentDidMount() {\n  this.fetchNames();\n  }\n\n  componentDidUpdate() {\n    this.fetchNames();\n    }\n\n  render() {\n    const { isLoading, names, error } = this.state;\n    return (\n      <React.Fragment>\n        <Grid\n                container\n                spacing={0}\n                direction=\"row\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{marginTop: 30}}\n                >\n      \n      {error ? <p>{error.message}</p> : null}\n      \n      {!isLoading ? (\n        names.map(name => {\n          const { id, firstname, lastname, asciify, binarify, countZeros } = name;\n          return (\n            <div key={id} \n            style = {{\n              width: 300, \n              display: \"inline-block\", \n              border: \"3px solid white\",\n              borderRadius: 10, \n              textAlign:'center', \n              margin:10, \n              padding:10,\n              color: \"white\"\n              }}>\n              <h2>{firstname} {lastname}</h2> \n              \n              <p>ASCII Value: {asciify} </p>\n              <p>Binary Value: {binarify}</p>\n              <p>Max Consecutive Zeros: {countZeros}</p>\n\n            </div>\n          );\n        })\n      // If there is a delay in data, let's let the user know it's loading\n      ) : (\n        <h3>Please Hold Caller...</h3>\n      )}\n      </Grid>\n    </React.Fragment>\n    \n    );\n  }\n}\n\nexport default Result;\n","import React from 'react';\nimport Form from './components/Form'\nimport Result from './components/Result';\n\n\nfunction App() {\n  return (\n    <div \n    className=\"App\" \n    style={{\n      backgroundImage: \"linear-gradient(160deg, rgba(39,199,171,1) 0%, rgba(70,143,197,1) 90%)\", \n      height: \"100vh\"\n      }}>\n     <Form/>\n     <Result/>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}